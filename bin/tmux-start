#!/bin/sh
set -euf

##
# Start tmux with a sesson and windows.
#
# Syntax:
#
#     tmux-start <session-name> [window-name [window-keys]] ...
#
# Example:
#
#     tmux-start mysession mywindow top
#
# The example does this:
#
#   * Create a session name "mysesssion".
#
#   * Create a window name "mywindow".
#
#   * Send the window keys "top" and a return character,
#     in order to run the "top" command.
#
#
# ## How this works
#
# If the session name already exists:
#
#   * Attach to it then exit.
#
# If there's a next arg:
# 
#   * Create a session name by using the arg.
# 
# If there's a next arg:
# 
#   * Create a window name by using the arg.
#   
# If there's a next arg:
# 
#   * Send window keys by using the arg.
# 
# If there's a next arg:
# 
#   * Repeat the steps to create a window name and window keys.
# 
# Finally:
# 
#   * Select the first window in order to make it visible.
#
#
# ## Project goals
#
# Short and simple-- easy to understand.
#
# Free open source-- easy to modify.
#
# POSIX shell usability-- easy to run anywhere.
#
#
# ## Tracking
#
# Program: tmux-start
# Version: 5.1.0
# Created: 2013-08-02T00:00:00Z
# Updated: 2023-03-24T18:30:50Z
# License: GPL-2.0 or GPL-3.0 or contact us for more
# Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
##

# Include https://github.com/SixArm/posix-shell-script-kit
. "$(dirname "$(readlink -f "$0")")/posix-shell-script-kit"

# Args
session_name="$1"; shift

# Preflight
command_exists_or_die tmux

# We expect the TMUX environment variable to be unset.
if [ ! -z ${TMUX+_} ]; then
    set +e
    err "The TMUX environment variable is set:"
    err ""
    err "    $TMUX"
    err ""
    err "This means you're already inside a tmux session."
    err ""
    err "To list sessions:"
    err ""
    err "    tmux list-sessions"
    err ""
    err "To kill a session such as the one for this script:"
    err ""
    err "    tmux kill-session -t $session_name"
    err ""
    exit 1
    set -e
fi

# Set the name of the terminal window to the session name.
# This line is optional -- you may comment it out if you prefer.
# You may prefer to set your own title, or may already be using
# something such as zsh auto title, or OSX iTerm2 appearance settings
# to automatically set window & tab titles, or some other approach.
printf "\033]1;$session_name\007"

# If possible, attach to the existing session name, then exit.
$(tmux attach-session -t "$session_name" 2> /dev/null && exit) || true

# Create a new session that has a default window.
if [ "$#" -eq 0 ]; then
  tmux new-session -s "$session_name"
  exit
fi

# Create a new session and its windows.
init=true
while [ "$#" -gt 0 ]
do
  window_name="$1"; shift
  if [ "$init" = true ]; then
    tmux new-session -d -s "$session_name" -n "$window_name"
    init=false
  else
    tmux new-window -d -t "$session_name" -n "$window_name"
  fi
  if [ "$#" -gt 0 ]; then
    window_keys="$1"; shift
    tmux send-keys -t "$session_name:$window_name" "$window_keys" C-m
  fi
done

# Select the first window, in order to make it the primary choice.
i=$(tmux list-windows -t mysession -F '#I' | head -1)
tmux select-window -t "$session_name:$i"

# Attach to the session. Use 256 colors. Detach any other clients.
tmux -2 attach-session -d
