#!/bin/sh

##
# Start tmux with a sesson and windows.
#
# Syntax:
#
#     tmux-start <session-name> [window-name [window-keys]] ...
#
# Example:
#
#     tmux-start mysession mywindow1 ls mywindow2 date
#
# The example does this:
#
#   * If the session name "mysession" exists, then attach and be done.
#
#   * Create a new session with name "mysesssion".
#
#   * Create a window name "mywindow1".
#
#   * Send the window the keys "ls" followed by a return;
#     this command lists the files in the directory.
#
#   * Create a window name "mywindow2".
#
#   * Send the window the keys "date" followed by a return;
#     this command shows the current date and time.
#
#
# ## What this does
#
# If the session name already exists, then attach and exit.
#
# Create a new session with a session name by using the first arg,
# and create each window and its keys by using the rest of the args.
#
# Finally, select the first window, because its our preference.
#
#
# ## Project goals
#
# Short and simple-- easy to understand.
#
# Free open source-- easy to modify.
#
# POSIX shell usability-- easy to run anywhere.
#
#
# ## Tracking
#
# Program: tmux-start
# Version: 5.0.0
# Created: 2013-08-02T00:00:00Z
# Updated: 2021-10-28T16:40:50Z
# License: GPL-2.0-or-greater or contact us for custom license
# Contact: Joel Parker Henderson (joel@joelparkerhenderson.com)
##

# Safeguards
set -euf

# Helper functions
out() { printf %s\\n "$*" ; }; export -f out
err() { >&2 printf %s\\n "$*" ; }; export -f err
die() { err $(log) "$*" ; exit 255 ; }; export -f die
log() { printf '%s %s %s\n' "$( now )" $$ "$*" ; }; export -f log
now() { date -u "+%Y-%m-%dT%H:%M:%S.%NZ" ; }; export -f now
sec() { date "+%s" ; }; export -f sec
zid() { hexdump -n 16 -v -e '16/1 "%02x" "\n"' /dev/random ; }; export -f zid
cmd() { command -v $1 >/dev/null 2>&1 ; }; export -f cmd

# Args
session_name="$1"; shift

# Preflight
cmd tmux || die "The command \"tmux\" needs to be available"

# We expect the TMUX environment variable to be unset.
if [ ! -z ${TMUX+_} ]; then
    set +e
    err "The TMUX environment variable is set:"
    err ""
    err "    $TMUX"
    err ""
    err "This means you're already inside a tmux session."
    err ""
    err "To list sessions:"
    err ""
    err "    tmux list-sessions"
    err ""
    err "To kill a session such as the one for this script:"
    err ""
    err "    tmux kill-session -t $session_name"
    err ""
    exit 1
    set -e
fi

# Set the name of the terminal window to the session name.
# This line is optional -- you may comment it out if you prefer.
# You may prefer to set your own title, or may already be using
# something such as zsh auto title, or OSX iTerm2 appearance settings
# to automatically set window & tab titles, or some other approach.
printf "\033]1;$session_name\007"

# If possible, attach to the existing session name, then exit.
$(tmux attach-session -t "$session_name" 2> /dev/null && exit) || true

# Create a new session that has a default window.
if [ "$#" -eq 0 ]; then
  tmux new-session -s "$session_name"
  exit
fi

# Create a new session and its windows.
init=true
while [ "$#" -gt 0 ]
do
  window_name="$1"; shift
  if [ "$init" = true ]; then
    tmux new-session -d -s "$session_name" -n "$window_name"
    init=false
  else
    tmux new-window -d -t "$session_name" -n "$window_name"
  fi
  if [ "$#" -gt 0 ]; then
    window_keys="$1"; shift
    tmux send-keys -t "$session_name:$window_name" "$window_keys" C-m
  fi
done

# Select the first window, in order to make it the primary choice.
i=$(tmux list-windows -t mysession -F '#I' | head -1)
tmux select-window -t "$session_name:$i"

# Attach to the session. Use 256 colors. Detach any other clients.
tmux -2 attach-session -d
